From 572319f45850f01ba2ebd60205647f7c32eb039a Mon Sep 17 00:00:00 2001
From: Adithya Kumar <adithya@composewell.com>
Date: Wed, 29 Nov 2023 22:24:34 +0530
Subject: [PATCH] Add a primop to get the thread statistics

---
 BUILD-NOTES.txt                     |  83 +++++++++++++++++
 compiler/GHC/Builtin/primops.txt.pp |   6 ++
 compiler/GHC/StgToCmm/Prim.hs       |   1 +
 configure.ac                        |   2 +-
 includes/rts/storage/TSO.h          |   8 ++
 includes/stg/MiscClosures.h         |   1 +
 rts/PrimOps.cmm                     |  37 ++++++++
 rts/RtsSymbols.c                    |   1 +
 rts/Schedule.c                      | 139 ++++++++++++++++++++++++++++
 rts/Schedule.h                      |   8 ++
 rts/Threads.c                       |   5 +
 rts/sm/Storage.c                    |  24 +++++
 rts/sm/Storage.h                    |   3 +
 utils/deriveConstants/Main.hs       |   7 +-
 14 files changed, 323 insertions(+), 2 deletions(-)
 create mode 100644 BUILD-NOTES.txt

diff --git a/BUILD-NOTES.txt b/BUILD-NOTES.txt
new file mode 100644
index 0000000000..eb39226ad7
--- /dev/null
+++ b/BUILD-NOTES.txt
@@ -0,0 +1,83 @@
+ghcup install ghc 9.0.2
+ghcup set ghc 9.0.2
+cabal install alex-3.4.0.0
+cabal install happy-1.20.0
+export PATH=~/.cabal/bin:$PATH
+git clone https://gitlab.haskell.org/harendra/ghc.git
+cd ghc
+git checkout ghc-9.2.8-develop
+git submodule update --init --recursive
+cp mk/build.mk.sample mk/build.mk
+# Uncomment "BuildFlavour = quick" line in mk/build.mk
+# sudo apt-get install autotools-dev
+# sudo apt-get install autoconf
+# sudo apt-get install libncurses5-dev
+./boot
+./configure
+make
+./inplace/bin/ghc-stage2
+make binary-dist # This will fail if autoreconf version is too recent (Use 2.69)
+
+# For faster incremental builds after changes,
+# uncomment "stage = 2" line in mk/build.mk
+
+# Ensure nix-profile is not in PATH to avoid any nix related issues
+
+# Find alex and happy versions required from aclocal.m4
+# GHC builds often fail because of incorrect happy versions
+# Need to find the correct one if the build fails
+A working configure output:
+
+----------------------------------------------------------------------
+Configure completed successfully.
+
+   Building GHC version  : 9.2.8.20231129
+          Git commit id  : 4999d2a61b35f185c285ca73bf8a767a4f35133f
+
+   Build platform        : x86_64-unknown-linux
+   Host platform         : x86_64-unknown-linux
+   Target platform       : x86_64-unknown-linux
+
+   Bootstrapping using   : /home/adithya/.ghcup/bin/ghc
+      which is version   : 9.0.2
+      with threaded RTS? : YES
+
+   Using (for bootstrapping) : gcc
+   Using gcc                 : cc
+      which is version       :
+      linker options         : -fuse-ld=gold
+   Building a cross compiler : NO
+   Unregisterised            : NO
+   TablesNextToCode          : YES
+   Build GMP in tree         : NO
+   hs-cpp       : cc
+   hs-cpp-flags : -E -undef -traditional
+   ar           : ar
+   ld           : ld.gold
+   nm           : nm
+   libtool      :
+   objdump      : objdump
+   ranlib       : ranlib
+   otool        :
+   install_name_tool :
+   windres      :
+   dllwrap      :
+   genlib       :
+   Happy        : /home/adithya/.cabal/bin/happy (1.20.0)
+   Alex         : /home/adithya/.cabal/bin/alex (3.4.0.0)
+   sphinx-build :
+   xelatex      :
+   makeinfo     :
+   git          : /usr/bin/git
+
+   Using LLVM tools
+      clang :
+      llc   :
+      opt   :
+
+   HsColour was not found; documentation will not contain source links
+
+   Tools to build Sphinx HTML documentation available: NO
+   Tools to build Sphinx PDF documentation available: NO
+   Tools to build Sphinx INFO documentation available: NO
+----------------------------------------------------------------------
diff --git a/compiler/GHC/Builtin/primops.txt.pp b/compiler/GHC/Builtin/primops.txt.pp
index 611869c1e0..a1af44e189 100644
--- a/compiler/GHC/Builtin/primops.txt.pp
+++ b/compiler/GHC/Builtin/primops.txt.pp
@@ -2946,6 +2946,12 @@ primop  ThreadStatusOp "threadStatus#" GenPrimOp
    out_of_line = True
    has_side_effects = True
 
+primop  ThreadCPUTimeOp "threadCPUTime#" GenPrimOp
+   State# RealWorld -> (# State# RealWorld, INT64, INT64, Int32#, Int32# #)
+   with
+   out_of_line = True
+   has_side_effects = True
+
 ------------------------------------------------------------------------
 section "Weak pointers"
 ------------------------------------------------------------------------
diff --git a/compiler/GHC/StgToCmm/Prim.hs b/compiler/GHC/StgToCmm/Prim.hs
index 07d02d542d..790378fdf8 100644
--- a/compiler/GHC/StgToCmm/Prim.hs
+++ b/compiler/GHC/StgToCmm/Prim.hs
@@ -1638,6 +1638,7 @@ emitPrimOp dflags primop = case primop of
   IsCurrentThreadBoundOp -> alwaysExternal
   NoDuplicateOp -> alwaysExternal
   ThreadStatusOp -> alwaysExternal
+  ThreadCPUTimeOp -> alwaysExternal
   MkWeakOp -> alwaysExternal
   MkWeakNoFinalizerOp -> alwaysExternal
   AddCFinalizerToWeakOp -> alwaysExternal
diff --git a/configure.ac b/configure.ac
index 31dd8a89b2..21658872d5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -20,7 +20,7 @@ AC_INIT([The Glorious Glasgow Haskell Compilation System], [9.2.8], [glasgow-has
 AC_CONFIG_MACRO_DIRS([m4])
 
 # Set this to YES for a released version, otherwise NO
-: ${RELEASE=YES}
+: ${RELEASE=NO}
 
 # The primary version (e.g. 7.5, 7.4.1) is set in the AC_INIT line
 # above.  If this is not a released version, then we will append the
diff --git a/includes/rts/storage/TSO.h b/includes/rts/storage/TSO.h
index 8bace9492c..cffaeb919e 100644
--- a/includes/rts/storage/TSO.h
+++ b/includes/rts/storage/TSO.h
@@ -183,6 +183,14 @@ typedef struct StgTSO_ {
     StgWord32 saved_winerror;
 #endif
 
+    // Can this go in the thread cost centre stack or a similar data structure
+    // for perf stats? We can enable the use of this using an RTS option.
+    // See compiler/profiling/CostCentre.hs
+    StgInt64 cur_sec;
+    StgInt64 cur_nsec;
+    StgInt32 count_thread_sched_out;
+    StgInt32 cur_allocated;
+
 } *StgTSOPtr; // StgTSO defined in rts/Types.h
 
 /* Note [StgStack dirtiness flags and concurrent marking]
diff --git a/includes/stg/MiscClosures.h b/includes/stg/MiscClosures.h
index a988d55b05..a7c7cc6a30 100644
--- a/includes/stg/MiscClosures.h
+++ b/includes/stg/MiscClosures.h
@@ -530,6 +530,7 @@ RTS_FUN_DECL(stg_myThreadIdzh);
 RTS_FUN_DECL(stg_labelThreadzh);
 RTS_FUN_DECL(stg_isCurrentThreadBoundzh);
 RTS_FUN_DECL(stg_threadStatuszh);
+RTS_FUN_DECL(stg_threadCPUTimezh);
 
 RTS_FUN_DECL(stg_mkWeakzh);
 RTS_FUN_DECL(stg_mkWeakNoFinalizzerzh);
diff --git a/rts/PrimOps.cmm b/rts/PrimOps.cmm
index 96d94893a3..9c4cf2580b 100644
--- a/rts/PrimOps.cmm
+++ b/rts/PrimOps.cmm
@@ -1106,6 +1106,43 @@ stg_threadStatuszh ( gcptr tso )
     return (ret,cap,locked);
 }
 
+stg_threadCPUTimezh (/* no args */)
+{
+    // I64 sec, nsec;
+    I64 sec_res, nsec_res;
+    I32 count_thread_sched_out, cur_allocated_res;
+    W_ tmp, sec_ptr, nsec_ptr, cur_allocated_ptr;
+
+    // sec   = StgTSO_cur_sec(CurrentTSO);
+    // nsec  = StgTSO_cur_nsec(CurrentTSO);
+
+    // sec = b64[CurrentTSO+120];
+    // nsec = b64[CurrentTSO+128];
+
+    count_thread_sched_out = I32[CurrentTSO+136];
+
+    //ccall traceThreadCPUTime(sec, nsec, SIZEOF_StgHeader+OFFSET_StgTSO_cur_nsec, SIZEOF_StgHeader);
+
+    STK_CHK_GEN_N (20);
+    reserve 20 = tmp {
+        sec_ptr = tmp;
+        nsec_ptr = tmp + 8;
+        cur_allocated_ptr = tmp + 16;
+
+        // Need to close the nursery to update the rCurrentNursery->free so that we
+        // can use it to get the accurate allocation count.
+        CLOSE_NURSERY();
+        ccall updateThreadCPUTimePostPrim(MyCapability(), CurrentTSO "ptr", sec_ptr "ptr", nsec_ptr "ptr", cur_allocated_ptr "ptr");
+        OPEN_NURSERY();
+
+        sec_res = I64[sec_ptr];
+        nsec_res = I64[nsec_ptr];
+        cur_allocated_res = I32[cur_allocated_ptr];
+    }
+
+    return (sec_res, nsec_res, cur_allocated_res, count_thread_sched_out);
+}
+
 /* -----------------------------------------------------------------------------
  * TVar primitives
  * -------------------------------------------------------------------------- */
diff --git a/rts/RtsSymbols.c b/rts/RtsSymbols.c
index 534f30cd4c..1fc8d279e1 100644
--- a/rts/RtsSymbols.c
+++ b/rts/RtsSymbols.c
@@ -974,6 +974,7 @@ extern char **environ;
       SymI_HasProto(stg_takeMVarzh)                                     \
       SymI_HasProto(stg_readMVarzh)                                     \
       SymI_HasProto(stg_threadStatuszh)                                 \
+      SymI_HasProto(stg_threadCPUTimezh)                                \
       SymI_HasProto(stg_tryPutMVarzh)                                   \
       SymI_HasProto(stg_tryTakeMVarzh)                                  \
       SymI_HasProto(stg_tryReadMVarzh)                                  \
diff --git a/rts/Schedule.c b/rts/Schedule.c
index ec32658fd1..001507782d 100644
--- a/rts/Schedule.c
+++ b/rts/Schedule.c
@@ -189,6 +189,137 @@ static void deleteThread_(StgTSO *tso);
 
    ------------------------------------------------------------------------ */
 
+#define TEN_POWER9 1000000000
+
+static void updateThreadCPUTimePre (Capability *cap, StgTSO *t)
+{
+/*
+    fprintf (stderr, "PRE.0: \
+tid = %d, \
+t->cur_sec = %ld, \
+t->cur_nsec = %ld, \
+t->cur_allocated = %d\n", t->id, t->cur_sec, t->cur_nsec, t->cur_allocated);
+*/
+    struct timespec ts;
+    int retval;
+    retval = clock_gettime (CLOCK_THREAD_CPUTIME_ID, &ts);
+    if (retval != 0) {
+        fprintf (stderr, "clock_gettime before failed");
+    } else {
+        if (t->cur_sec < 0 || t->cur_nsec < 0) {
+            fprintf (stderr, "ON ENTRY ERROR: \
+tid = %d, \
+t->cur_sec = %ld \
+t->cur_nsec = %ld \
+t->cur_allocated = %d\n", t->id, t->cur_sec, t->cur_nsec, t->cur_allocated);
+        }
+        t->cur_sec -= ts.tv_sec;
+        t->cur_nsec -= ts.tv_nsec;
+
+        // nsec offset is 128
+        //fprintf (stderr, "tso nsec offset: %ld", (char *)(&t->cur_nsec) - (char *)t);
+        //exit (1);
+        // nsec sizeof = 8
+        //fprintf (stderr, "tso nsec size: %d", sizeof(t->cur_nsec));
+    };
+
+    t->cur_allocated -= getCurrentAllocated (cap);
+/*
+    fprintf (stderr, "PRE.-: \
+tid = %d, \
+t->cur_sec = %ld, \
+t->cur_nsec = %ld, \
+t->cur_allocated = %d\n",
+             t->id,
+             ts.tv_sec,
+             ts.tv_nsec,
+             getCurrentAllocated (cap));
+
+    fprintf (stderr, "PRE.1: \
+tid = %d, \
+t->cur_sec = %ld, \
+t->cur_nsec = %ld, \
+t->cur_allocated = %d\n", t->id, t->cur_sec, t->cur_nsec, t->cur_allocated);
+*/
+}
+
+// This is also used in the PrimOps as a foreign call
+void updateThreadCPUTimePostPrim
+    (Capability *cap,
+     StgTSO *t,
+     StgInt64 *cur_sec_res,
+     StgInt64 *cur_nsec_res,
+     StgInt32 *cur_allocated_res)
+{
+/*
+    fprintf (stderr, "POST.0: \
+tid = %d, \
+t->cur_sec = %ld, \
+t->cur_nsec = %ld, \
+t->cur_allocated = %d\n", t->id, t->cur_sec, t->cur_nsec, t->cur_allocated);
+*/
+    *cur_allocated_res = t->cur_allocated + getCurrentAllocated (cap);
+    // fprintf (stderr, "POST: %d\n", t->cur_allocated);
+
+    struct timespec ts;
+    int retval;
+    retval = clock_gettime (CLOCK_THREAD_CPUTIME_ID, &ts);
+    if (retval != 0) {
+        fprintf (stderr, "clock_gettime after failed");
+    } else {
+        //fprintf (stderr, "sec = %ld nsec = %ld\n", ts.tv_sec, ts.tv_nsec);
+        *cur_sec_res = t->cur_sec + ts.tv_sec;
+        *cur_nsec_res = t->cur_nsec + ts.tv_nsec;
+        if (*cur_nsec_res < 0) {
+            *cur_nsec_res += TEN_POWER9;
+            *cur_sec_res -= 1;
+        } else if (*cur_nsec_res >= TEN_POWER9) {
+            *cur_nsec_res -= TEN_POWER9;
+            *cur_sec_res += 1;
+        }
+        // fprintf (stderr, "AFTER DONE: tid = %d, t->cur_sec = %ld t->cur_nsec = %ld\n", t->id, t->cur_sec, t->cur_nsec);
+        if (*cur_sec_res < 0 || *cur_nsec_res < 0) {
+            fprintf (stderr, "ON EXIT ERROR PRIM: \
+tid = %d, \
+t->cur_sec = %ld \
+t->cur_nsec = %ld \
+t->cur_allocated = %d\n",
+             t->id,
+             *cur_sec_res,
+             *cur_nsec_res,
+             *cur_allocated_res);
+        }
+        //fprintf (stderr, "acc sec = %ld acc nsec = %ld\n", t->cur_sec, t->cur_nsec);
+    }
+/*
+    fprintf (stderr, "POST.+: \
+tid = %d, \
+t->cur_sec = %ld, \
+t->cur_nsec = %ld, \
+t->cur_allocated = %d\n",
+             t->id,
+             ts.tv_sec,
+             ts.tv_nsec,
+             getCurrentAllocated (cap));
+
+    fprintf (stderr, "POST.1: \
+tid = %d, \
+t->cur_sec = %ld, \
+t->cur_nsec = %ld, \
+t->cur_allocated = %d\n",
+             t->id,
+             *cur_sec_res,
+             *cur_nsec_res,
+             *cur_allocated_res);
+             */
+}
+
+static void updateThreadCPUTimePost (Capability *cap, StgTSO *t)
+{
+    updateThreadCPUTimePostPrim(cap, t, &t->cur_sec, &t->cur_nsec, &t->cur_allocated);
+    t->count_thread_sched_out += 1;
+}
+
 static Capability *
 schedule (Capability *initialCapability, Task *task)
 {
@@ -478,8 +609,13 @@ run_thread:
     case ThreadRunGHC:
     {
         StgRegTable *r;
+
+        updateThreadCPUTimePre (cap, t);
         r = StgRun((StgFunPtr) stg_returnToStackTop, &cap->r);
         cap = regTableToCapability(r);
+        t = cap->r.rCurrentTSO;
+        updateThreadCPUTimePost (cap, t);
+
         ret = r->rRet;
         break;
     }
@@ -2454,6 +2590,7 @@ suspendThread (StgRegTable *reg, bool interruptible)
   task = cap->running_task;
   tso = cap->r.rCurrentTSO;
 
+  updateThreadCPUTimePost (cap, tso);
   traceEventStopThread(cap, tso, THREAD_SUSPENDED_FOREIGN_CALL, 0);
 
   // XXX this might not be necessary --SDM
@@ -2553,6 +2690,8 @@ resumeThread (void *task_)
 
     IF_DEBUG(sanity, checkTSO(tso));
 
+    updateThreadCPUTimePre (cap, tso);
+
     return &cap->r;
 }
 
diff --git a/rts/Schedule.h b/rts/Schedule.h
index 4c692842e7..c62b907ec2 100644
--- a/rts/Schedule.h
+++ b/rts/Schedule.h
@@ -24,6 +24,14 @@ void exitScheduler (bool wait_foreign);
 void freeScheduler (void);
 void markScheduler (evac_fn evac, void *user);
 
+// Primitive operation used to update the threadCPUTime prim-op
+void updateThreadCPUTimePostPrim
+    (Capability *cap,
+     StgTSO *t,
+     StgInt64 *cur_sec_res,
+     StgInt64 *cur_nsec_res,
+     StgInt32 *cur_allocated_res);
+
 // Place a new thread on the run queue of the current Capability
 void scheduleThread (Capability *cap, StgTSO *tso);
 
diff --git a/rts/Threads.c b/rts/Threads.c
index 24c602a8de..41a5837399 100644
--- a/rts/Threads.c
+++ b/rts/Threads.c
@@ -117,6 +117,11 @@ createThread(Capability *cap, W_ size)
     tso->prof.cccs = CCS_MAIN;
 #endif
 
+    tso->cur_sec = 0;
+    tso->cur_nsec = 0;
+    tso->count_thread_sched_out = 0;
+    tso->cur_allocated = 0;
+
     // put a stop frame on the stack
     stack->sp -= sizeofW(StgStopFrame);
     SET_HDR((StgClosure*)stack->sp,
diff --git a/rts/sm/Storage.c b/rts/sm/Storage.c
index f3591a88d3..72816ea706 100644
--- a/rts/sm/Storage.c
+++ b/rts/sm/Storage.c
@@ -1576,6 +1576,30 @@ calcTotalAllocated (void)
     return tot_alloc;
 }
 
+StgWord64
+getCurrentAllocated (Capability *cap)
+{
+    bdescr *bd;
+    StgWord64 allocated;
+
+    allocated = cap->total_allocated;
+
+    // Add unfinished nursery blocks
+    bd = cap->r.rCurrentNursery;
+    if (bd) {
+      allocated += bd->free - bd->start;
+    }
+    bd = cap->r.rCurrentAlloc;
+    if (bd) {
+      allocated += bd->free - bd->start;
+    }
+    bd = cap->pinned_object_block;
+    if (bd) {
+      allocated += bd->free - bd->start;
+    }
+    return allocated;
+}
+
 //
 // Update the per-cap total_allocated numbers with an approximation of
 // the amount of memory used in each cap's nursery.
diff --git a/rts/sm/Storage.h b/rts/sm/Storage.h
index 69d13251bc..f168e60cdb 100644
--- a/rts/sm/Storage.h
+++ b/rts/sm/Storage.h
@@ -100,6 +100,9 @@ INLINE_HEADER void newNurseryBlock (bdescr *bd) {
 void     updateNurseriesStats (void);
 uint64_t calcTotalAllocated   (void);
 
+StgWord64
+getCurrentAllocated (Capability *cap);
+
 /* -----------------------------------------------------------------------------
    Stats 'n' DEBUG stuff
    -------------------------------------------------------------------------- */
diff --git a/utils/deriveConstants/Main.hs b/utils/deriveConstants/Main.hs
index 8bf8ae7b44..cfc7c34bc9 100644
--- a/utils/deriveConstants/Main.hs
+++ b/utils/deriveConstants/Main.hs
@@ -439,6 +439,12 @@ wanteds os = concat
           ,closureField_ Both "StgTSO_cccs" "StgTSO" "prof.cccs"
           ,closureField  Both "StgTSO"      "stackobj"
 
+          -- XXX These fields might not be required for our use case
+          ,closureField  C "StgTSO"      "cur_sec"
+          ,closureField  C "StgTSO"      "cur_nsec"
+          ,closureField  C "StgTSO"      "count_thread_sched_out"
+          ,closureField  C "StgTSO"      "cur_allocated"
+
           ,closureField       Both "StgStack" "sp"
           ,closureFieldOffset Both "StgStack" "stack"
           ,closureField       C    "StgStack" "stack_size"
@@ -982,4 +988,3 @@ execute verbose prog args
       ec <- rawSystem prog args
       unless (ec == ExitSuccess) $
           die ("Executing " ++ show prog ++ " failed")
-
-- 
2.17.1

